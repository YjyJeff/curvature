<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="117911"><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (12 samples, 0.01%)</title><rect x="0.0042%" y="309" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="12"/><text x="0.2542%" y="319.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (20 samples, 0.02%)</title><rect x="0.0144%" y="309" width="0.0170%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="20"/><text x="0.2644%" y="319.50"></text></g><g><title>numbers`&lt;T as core::any::Any&gt;::type_id (16 samples, 0.01%)</title><rect x="0.2120%" y="293" width="0.0136%" height="15" fill="rgb(221,193,54)" fg:x="250" fg:w="16"/><text x="0.4620%" y="303.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::as_any (22 samples, 0.02%)</title><rect x="0.2256%" y="293" width="0.0187%" height="15" fill="rgb(248,212,6)" fg:x="266" fg:w="22"/><text x="0.4756%" y="303.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::function::aggregate::count::Count&lt;_&gt; as curvature::exec::physical_expr::function::aggregate::AggregationFunction&gt;::batch_update_states (25 samples, 0.02%)</title><rect x="0.2578%" y="293" width="0.0212%" height="15" fill="rgb(208,68,35)" fg:x="304" fg:w="25"/><text x="0.5078%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (37 samples, 0.03%)</title><rect x="0.3638%" y="277" width="0.0314%" height="15" fill="rgb(232,128,0)" fg:x="429" fg:w="37"/><text x="0.6138%" y="287.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::aggregate::simple_aggregate::SimpleAggregate as curvature::exec::physical_operator::PhysicalOperator&gt;::write_data (189 samples, 0.16%)</title><rect x="0.2790%" y="293" width="0.1603%" height="15" fill="rgb(207,160,47)" fg:x="329" fg:w="189"/><text x="0.5290%" y="303.50"></text></g><g><title>numbers`quanta::instant::Instant::now (52 samples, 0.04%)</title><rect x="0.3952%" y="277" width="0.0441%" height="15" fill="rgb(228,23,34)" fg:x="466" fg:w="52"/><text x="0.6452%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (33 samples, 0.03%)</title><rect x="0.5021%" y="277" width="0.0280%" height="15" fill="rgb(218,30,26)" fg:x="592" fg:w="33"/><text x="0.7521%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.03%)</title><rect x="0.5716%" y="261" width="0.0297%" height="15" fill="rgb(220,122,19)" fg:x="674" fg:w="35"/><text x="0.8216%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.03%)</title><rect x="0.6683%" y="245" width="0.0263%" height="15" fill="rgb(250,228,42)" fg:x="788" fg:w="31"/><text x="0.9183%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (36 samples, 0.03%)</title><rect x="0.7166%" y="229" width="0.0305%" height="15" fill="rgb(240,193,28)" fg:x="845" fg:w="36"/><text x="0.9666%" y="239.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (199 samples, 0.17%)</title><rect x="0.6946%" y="245" width="0.1688%" height="15" fill="rgb(216,20,37)" fg:x="819" fg:w="199"/><text x="0.9446%" y="255.50"></text></g><g><title>numbers`quanta::instant::Instant::now (131 samples, 0.11%)</title><rect x="0.7523%" y="229" width="0.1111%" height="15" fill="rgb(206,188,39)" fg:x="887" fg:w="131"/><text x="1.0023%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.03%)</title><rect x="0.8998%" y="229" width="0.0297%" height="15" fill="rgb(217,207,13)" fg:x="1061" fg:w="35"/><text x="1.1498%" y="239.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::reference (25 samples, 0.02%)</title><rect x="0.9295%" y="229" width="0.0212%" height="15" fill="rgb(231,73,38)" fg:x="1096" fg:w="25"/><text x="1.1795%" y="239.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::field_ref::FieldRef as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (189 samples, 0.16%)</title><rect x="0.8634%" y="245" width="0.1603%" height="15" fill="rgb(225,20,46)" fg:x="1018" fg:w="189"/><text x="1.1134%" y="255.50"></text></g><g><title>numbers`quanta::instant::Instant::now (86 samples, 0.07%)</title><rect x="0.9507%" y="229" width="0.0729%" height="15" fill="rgb(210,31,41)" fg:x="1121" fg:w="86"/><text x="1.2007%" y="239.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (3,835 samples, 3.25%)</title><rect x="1.0237%" y="245" width="3.2525%" height="15" fill="rgb(221,200,47)" fg:x="1207" fg:w="3835"/><text x="1.2737%" y="255.50">num..</text></g><g><title>numbers`data_block::array::ArrayImpl::reference (13 samples, 0.01%)</title><rect x="4.2761%" y="245" width="0.0110%" height="15" fill="rgb(226,26,5)" fg:x="5042" fg:w="13"/><text x="4.5261%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::arith::Arith as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (4,420 samples, 3.75%)</title><rect x="0.6013%" y="261" width="3.7486%" height="15" fill="rgb(249,33,26)" fg:x="709" fg:w="4420"/><text x="0.8513%" y="271.50">numb..</text></g><g><title>numbers`quanta::instant::Instant::now (74 samples, 0.06%)</title><rect x="4.2871%" y="245" width="0.0628%" height="15" fill="rgb(235,183,28)" fg:x="5055" fg:w="74"/><text x="4.5371%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (40 samples, 0.03%)</title><rect x="4.3719%" y="245" width="0.0339%" height="15" fill="rgb(221,5,38)" fg:x="5155" fg:w="40"/><text x="4.6219%" y="255.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::reference (18 samples, 0.02%)</title><rect x="4.4059%" y="245" width="0.0153%" height="15" fill="rgb(247,18,42)" fg:x="5195" fg:w="18"/><text x="4.6559%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (143 samples, 0.12%)</title><rect x="4.3499%" y="261" width="0.1213%" height="15" fill="rgb(241,131,45)" fg:x="5129" fg:w="143"/><text x="4.5999%" y="271.50"></text></g><g><title>numbers`quanta::instant::Instant::now (59 samples, 0.05%)</title><rect x="4.4211%" y="245" width="0.0500%" height="15" fill="rgb(249,31,29)" fg:x="5213" fg:w="59"/><text x="4.6711%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::field_ref::FieldRef as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (14 samples, 0.01%)</title><rect x="4.4712%" y="261" width="0.0119%" height="15" fill="rgb(225,111,53)" fg:x="5272" fg:w="14"/><text x="4.7212%" y="271.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (23 samples, 0.02%)</title><rect x="4.4830%" y="261" width="0.0195%" height="15" fill="rgb(238,160,17)" fg:x="5286" fg:w="23"/><text x="4.7330%" y="271.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::len (46 samples, 0.04%)</title><rect x="4.5025%" y="261" width="0.0390%" height="15" fill="rgb(214,148,48)" fg:x="5309" fg:w="46"/><text x="4.7525%" y="271.50"></text></g><g><title>numbers`data_block::compute::comparison::primitive::intrinsic::stable::_&lt;impl data_block::compute::comparison::primitive::intrinsic::PartialOrdExt for i8&gt;::ne_scalar (1,081 samples, 0.92%)</title><rect x="4.5450%" y="261" width="0.9168%" height="15" fill="rgb(232,36,49)" fg:x="5359" fg:w="1081"/><text x="4.7950%" y="271.50"></text></g><g><title>numbers`data_block::compute::logical::and_inplace (244 samples, 0.21%)</title><rect x="5.4617%" y="261" width="0.2069%" height="15" fill="rgb(209,103,24)" fg:x="6440" fg:w="244"/><text x="5.7117%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (6,128 samples, 5.20%)</title><rect x="0.5301%" y="277" width="5.1971%" height="15" fill="rgb(229,88,8)" fg:x="625" fg:w="6128"/><text x="0.7801%" y="287.50">number..</text></g><g><title>numbers`quanta::instant::Instant::now (69 samples, 0.06%)</title><rect x="5.6687%" y="261" width="0.0585%" height="15" fill="rgb(213,181,19)" fg:x="6684" fg:w="69"/><text x="5.9187%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (26 samples, 0.02%)</title><rect x="5.7272%" y="277" width="0.0221%" height="15" fill="rgb(254,191,54)" fg:x="6753" fg:w="26"/><text x="5.9772%" y="287.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (34,956 samples, 29.65%)</title><rect x="5.7509%" y="277" width="29.6461%" height="15" fill="rgb(241,83,37)" fg:x="6781" fg:w="34956"/><text x="6.0009%" y="287.50">numbers`data_block::array::ArrayImpl::filter</text></g><g><title>numbers`data_block::array::ArrayImpl::len (41 samples, 0.03%)</title><rect x="35.3970%" y="277" width="0.0348%" height="15" fill="rgb(233,36,39)" fg:x="41737" fg:w="41"/><text x="35.6470%" y="287.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (41,353 samples, 35.07%)</title><rect x="0.4402%" y="293" width="35.0714%" height="15" fill="rgb(226,3,54)" fg:x="519" fg:w="41353"/><text x="0.6902%" y="303.50">numbers`&lt;curvature::exec::physical_operator::filter::Filt..</text></g><g><title>numbers`quanta::instant::Instant::now (77 samples, 0.07%)</title><rect x="35.4462%" y="277" width="0.0653%" height="15" fill="rgb(245,192,40)" fg:x="41795" fg:w="77"/><text x="35.6962%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (46 samples, 0.04%)</title><rect x="39.7732%" y="261" width="0.0390%" height="15" fill="rgb(238,167,29)" fg:x="46897" fg:w="46"/><text x="40.0232%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (5,122 samples, 4.34%)</title><rect x="35.5310%" y="277" width="4.3440%" height="15" fill="rgb(232,182,51)" fg:x="41895" fg:w="5122"/><text x="35.7810%" y="287.50">numbe..</text></g><g><title>numbers`quanta::instant::Instant::now (74 samples, 0.06%)</title><rect x="39.8122%" y="261" width="0.0628%" height="15" fill="rgb(231,60,39)" fg:x="46943" fg:w="74"/><text x="40.0622%" y="271.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::len (16 samples, 0.01%)</title><rect x="39.8750%" y="277" width="0.0136%" height="15" fill="rgb(208,69,12)" fg:x="47017" fg:w="16"/><text x="40.1250%" y="287.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (5,168 samples, 4.38%)</title><rect x="35.5132%" y="293" width="4.3830%" height="15" fill="rgb(235,93,37)" fg:x="41874" fg:w="5168"/><text x="35.7632%" y="303.50">numbe..</text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (40 samples, 0.03%)</title><rect x="39.8962%" y="293" width="0.0339%" height="15" fill="rgb(213,116,39)" fg:x="47042" fg:w="40"/><text x="40.1462%" y="303.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (17 samples, 0.01%)</title><rect x="39.9369%" y="293" width="0.0144%" height="15" fill="rgb(222,207,29)" fg:x="47090" fg:w="17"/><text x="40.1869%" y="303.50"></text></g><g><title>numbers`curvature::exec::query_executor::execute_pipeline (47,078 samples, 39.93%)</title><rect x="0.0314%" y="309" width="39.9267%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="47078"/><text x="0.2814%" y="319.50">numbers`curvature::exec::query_executor::execute_pipeline</text></g><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (16 samples, 0.01%)</title><rect x="39.9598%" y="277" width="0.0136%" height="15" fill="rgb(218,138,4)" fg:x="47117" fg:w="16"/><text x="40.2098%" y="287.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (15 samples, 0.01%)</title><rect x="39.9734%" y="277" width="0.0127%" height="15" fill="rgb(250,191,14)" fg:x="47133" fg:w="15"/><text x="40.2234%" y="287.50"></text></g><g><title>numbers`&lt;T as core::any::Any&gt;::type_id (19 samples, 0.02%)</title><rect x="40.1930%" y="261" width="0.0161%" height="15" fill="rgb(239,60,40)" fg:x="47392" fg:w="19"/><text x="40.4430%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::as_any (19 samples, 0.02%)</title><rect x="40.2091%" y="261" width="0.0161%" height="15" fill="rgb(206,27,48)" fg:x="47411" fg:w="19"/><text x="40.4591%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::function::aggregate::count::Count&lt;_&gt; as curvature::exec::physical_expr::function::Function&gt;::arguments (15 samples, 0.01%)</title><rect x="40.2278%" y="261" width="0.0127%" height="15" fill="rgb(225,35,8)" fg:x="47433" fg:w="15"/><text x="40.4778%" y="271.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::function::aggregate::count::Count&lt;_&gt; as curvature::exec::physical_expr::function::aggregate::AggregationFunction&gt;::batch_update_states (20 samples, 0.02%)</title><rect x="40.2405%" y="261" width="0.0170%" height="15" fill="rgb(250,213,24)" fg:x="47448" fg:w="20"/><text x="40.4905%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.03%)</title><rect x="40.3321%" y="245" width="0.0271%" height="15" fill="rgb(247,123,22)" fg:x="47556" fg:w="32"/><text x="40.5821%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::aggregate::simple_aggregate::SimpleAggregate as curvature::exec::physical_operator::PhysicalOperator&gt;::write_data (169 samples, 0.14%)</title><rect x="40.2575%" y="261" width="0.1433%" height="15" fill="rgb(231,138,38)" fg:x="47468" fg:w="169"/><text x="40.5075%" y="271.50"></text></g><g><title>numbers`quanta::instant::Instant::now (49 samples, 0.04%)</title><rect x="40.3593%" y="245" width="0.0416%" height="15" fill="rgb(231,145,46)" fg:x="47588" fg:w="49"/><text x="40.6093%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (43 samples, 0.04%)</title><rect x="40.4593%" y="245" width="0.0365%" height="15" fill="rgb(251,118,11)" fg:x="47706" fg:w="43"/><text x="40.7093%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (41 samples, 0.03%)</title><rect x="40.5289%" y="229" width="0.0348%" height="15" fill="rgb(217,147,25)" fg:x="47788" fg:w="41"/><text x="40.7789%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (47 samples, 0.04%)</title><rect x="40.6366%" y="213" width="0.0399%" height="15" fill="rgb(247,81,37)" fg:x="47915" fg:w="47"/><text x="40.8866%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.03%)</title><rect x="40.6951%" y="197" width="0.0263%" height="15" fill="rgb(209,12,38)" fg:x="47984" fg:w="31"/><text x="40.9451%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (204 samples, 0.17%)</title><rect x="40.6764%" y="213" width="0.1730%" height="15" fill="rgb(227,1,9)" fg:x="47962" fg:w="204"/><text x="40.9264%" y="223.50"></text></g><g><title>numbers`quanta::instant::Instant::now (142 samples, 0.12%)</title><rect x="40.7290%" y="197" width="0.1204%" height="15" fill="rgb(248,47,43)" fg:x="48024" fg:w="142"/><text x="40.9790%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.03%)</title><rect x="40.8774%" y="197" width="0.0254%" height="15" fill="rgb(221,10,30)" fg:x="48199" fg:w="30"/><text x="41.1274%" y="207.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::reference (18 samples, 0.02%)</title><rect x="40.9029%" y="197" width="0.0153%" height="15" fill="rgb(210,229,1)" fg:x="48229" fg:w="18"/><text x="41.1529%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::field_ref::FieldRef as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (133 samples, 0.11%)</title><rect x="40.8495%" y="213" width="0.1128%" height="15" fill="rgb(222,148,37)" fg:x="48166" fg:w="133"/><text x="41.0995%" y="223.50"></text></g><g><title>numbers`quanta::instant::Instant::now (52 samples, 0.04%)</title><rect x="40.9182%" y="197" width="0.0441%" height="15" fill="rgb(234,67,33)" fg:x="48247" fg:w="52"/><text x="41.1682%" y="207.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (3,835 samples, 3.25%)</title><rect x="40.9623%" y="213" width="3.2525%" height="15" fill="rgb(247,98,35)" fg:x="48299" fg:w="3835"/><text x="41.2123%" y="223.50">num..</text></g><g><title>numbers`&lt;curvature::exec::physical_expr::arith::Arith as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (4,390 samples, 3.72%)</title><rect x="40.5636%" y="229" width="3.7231%" height="15" fill="rgb(247,138,52)" fg:x="47829" fg:w="4390"/><text x="40.8136%" y="239.50">numb..</text></g><g><title>numbers`quanta::instant::Instant::now (74 samples, 0.06%)</title><rect x="44.2240%" y="213" width="0.0628%" height="15" fill="rgb(213,79,30)" fg:x="52145" fg:w="74"/><text x="44.4740%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (37 samples, 0.03%)</title><rect x="44.3021%" y="213" width="0.0314%" height="15" fill="rgb(246,177,23)" fg:x="52237" fg:w="37"/><text x="44.5521%" y="223.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::reference (20 samples, 0.02%)</title><rect x="44.3334%" y="213" width="0.0170%" height="15" fill="rgb(230,62,27)" fg:x="52274" fg:w="20"/><text x="44.5834%" y="223.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (127 samples, 0.11%)</title><rect x="44.2868%" y="229" width="0.1077%" height="15" fill="rgb(216,154,8)" fg:x="52219" fg:w="127"/><text x="44.5368%" y="239.50"></text></g><g><title>numbers`quanta::instant::Instant::now (52 samples, 0.04%)</title><rect x="44.3504%" y="213" width="0.0441%" height="15" fill="rgb(244,35,45)" fg:x="52294" fg:w="52"/><text x="44.6004%" y="223.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (18 samples, 0.02%)</title><rect x="44.4030%" y="229" width="0.0153%" height="15" fill="rgb(251,115,12)" fg:x="52356" fg:w="18"/><text x="44.6530%" y="239.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::len (31 samples, 0.03%)</title><rect x="44.4182%" y="229" width="0.0263%" height="15" fill="rgb(240,54,50)" fg:x="52374" fg:w="31"/><text x="44.6682%" y="239.50"></text></g><g><title>numbers`data_block::compute::comparison::primitive::intrinsic::stable::_&lt;impl data_block::compute::comparison::primitive::intrinsic::PartialOrdExt for i8&gt;::ne_scalar (1,085 samples, 0.92%)</title><rect x="44.4471%" y="229" width="0.9202%" height="15" fill="rgb(233,84,52)" fg:x="52408" fg:w="1085"/><text x="44.6971%" y="239.50"></text></g><g><title>numbers`data_block::compute::logical::and_inplace (236 samples, 0.20%)</title><rect x="45.3673%" y="229" width="0.2002%" height="15" fill="rgb(207,117,47)" fg:x="53493" fg:w="236"/><text x="45.6173%" y="239.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (6,050 samples, 5.13%)</title><rect x="40.4958%" y="245" width="5.1310%" height="15" fill="rgb(249,43,39)" fg:x="47749" fg:w="6050"/><text x="40.7458%" y="255.50">number..</text></g><g><title>numbers`quanta::instant::Instant::now (70 samples, 0.06%)</title><rect x="45.5674%" y="229" width="0.0594%" height="15" fill="rgb(209,38,44)" fg:x="53729" fg:w="70"/><text x="45.8174%" y="239.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (28 samples, 0.02%)</title><rect x="45.6268%" y="245" width="0.0237%" height="15" fill="rgb(236,212,23)" fg:x="53799" fg:w="28"/><text x="45.8768%" y="255.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (34,951 samples, 29.64%)</title><rect x="45.6522%" y="245" width="29.6418%" height="15" fill="rgb(242,79,21)" fg:x="53829" fg:w="34951"/><text x="45.9022%" y="255.50">numbers`data_block::array::ArrayImpl::filter</text></g><g><title>numbers`data_block::array::ArrayImpl::len (51 samples, 0.04%)</title><rect x="75.2941%" y="245" width="0.0433%" height="15" fill="rgb(211,96,35)" fg:x="88780" fg:w="51"/><text x="75.5441%" y="255.50"></text></g><g><title>numbers`data_block::compute::logical::and_inplace (13 samples, 0.01%)</title><rect x="75.3424%" y="245" width="0.0110%" height="15" fill="rgb(253,215,40)" fg:x="88837" fg:w="13"/><text x="75.5924%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (41,277 samples, 35.01%)</title><rect x="40.4025%" y="261" width="35.0069%" height="15" fill="rgb(211,81,21)" fg:x="47639" fg:w="41277"/><text x="40.6525%" y="271.50">numbers`&lt;curvature::exec::physical_operator::filter::Filt..</text></g><g><title>numbers`quanta::instant::Instant::now (66 samples, 0.06%)</title><rect x="75.3534%" y="245" width="0.0560%" height="15" fill="rgb(208,190,38)" fg:x="88850" fg:w="66"/><text x="75.6034%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.03%)</title><rect x="79.6915%" y="229" width="0.0331%" height="15" fill="rgb(235,213,38)" fg:x="93965" fg:w="39"/><text x="79.9415%" y="239.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (5,104 samples, 4.33%)</title><rect x="75.4408%" y="245" width="4.3287%" height="15" fill="rgb(237,122,38)" fg:x="88953" fg:w="5104"/><text x="75.6908%" y="255.50">numbe..</text></g><g><title>numbers`quanta::instant::Instant::now (52 samples, 0.04%)</title><rect x="79.7254%" y="229" width="0.0441%" height="15" fill="rgb(244,218,35)" fg:x="94005" fg:w="52"/><text x="79.9754%" y="239.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::len (17 samples, 0.01%)</title><rect x="79.7695%" y="245" width="0.0144%" height="15" fill="rgb(240,68,47)" fg:x="94057" fg:w="17"/><text x="80.0195%" y="255.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (5,158 samples, 4.37%)</title><rect x="75.4171%" y="261" width="4.3745%" height="15" fill="rgb(210,16,53)" fg:x="88925" fg:w="5158"/><text x="75.6671%" y="271.50">numbe..</text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (40 samples, 0.03%)</title><rect x="79.7915%" y="261" width="0.0339%" height="15" fill="rgb(235,124,12)" fg:x="94083" fg:w="40"/><text x="80.0415%" y="271.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (13 samples, 0.01%)</title><rect x="79.8297%" y="261" width="0.0110%" height="15" fill="rgb(224,169,11)" fg:x="94128" fg:w="13"/><text x="80.0797%" y="271.50"></text></g><g><title>numbers`curvature::exec::query_executor::execute_pipeline (46,995 samples, 39.86%)</title><rect x="39.9861%" y="277" width="39.8563%" height="15" fill="rgb(250,166,2)" fg:x="47148" fg:w="46995"/><text x="40.2361%" y="287.50">numbers`curvature::exec::query_executor::execute_pipeline</text></g><g><title>numbers`&lt;curvature::exec::physical_operator::aggregate::simple_aggregate::SimpleAggregate as curvature::exec::physical_operator::PhysicalOperator&gt;::write_data (43 samples, 0.04%)</title><rect x="79.8857%" y="229" width="0.0365%" height="15" fill="rgb(242,216,29)" fg:x="94194" fg:w="43"/><text x="80.1357%" y="239.50"></text></g><g><title>numbers`quanta::instant::Instant::now (15 samples, 0.01%)</title><rect x="79.9094%" y="213" width="0.0127%" height="15" fill="rgb(230,116,27)" fg:x="94222" fg:w="15"/><text x="80.1594%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.02%)</title><rect x="79.9332%" y="213" width="0.0153%" height="15" fill="rgb(228,99,48)" fg:x="94250" fg:w="18"/><text x="80.1832%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.01%)</title><rect x="79.9824%" y="181" width="0.0102%" height="15" fill="rgb(253,11,6)" fg:x="94308" fg:w="12"/><text x="80.2324%" y="191.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (56 samples, 0.05%)</title><rect x="79.9925%" y="181" width="0.0475%" height="15" fill="rgb(247,143,39)" fg:x="94320" fg:w="56"/><text x="80.2425%" y="191.50"></text></g><g><title>numbers`quanta::instant::Instant::now (39 samples, 0.03%)</title><rect x="80.0070%" y="165" width="0.0331%" height="15" fill="rgb(236,97,10)" fg:x="94337" fg:w="39"/><text x="80.2570%" y="175.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::field_ref::FieldRef as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (47 samples, 0.04%)</title><rect x="80.0400%" y="181" width="0.0399%" height="15" fill="rgb(233,208,19)" fg:x="94376" fg:w="47"/><text x="80.2900%" y="191.50"></text></g><g><title>numbers`quanta::instant::Instant::now (20 samples, 0.02%)</title><rect x="80.0629%" y="165" width="0.0170%" height="15" fill="rgb(216,164,2)" fg:x="94403" fg:w="20"/><text x="80.3129%" y="175.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (941 samples, 0.80%)</title><rect x="80.0799%" y="181" width="0.7981%" height="15" fill="rgb(220,129,5)" fg:x="94423" fg:w="941"/><text x="80.3299%" y="191.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::arith::Arith as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (1,103 samples, 0.94%)</title><rect x="79.9612%" y="197" width="0.9355%" height="15" fill="rgb(242,17,10)" fg:x="94283" fg:w="1103"/><text x="80.2112%" y="207.50"></text></g><g><title>numbers`quanta::instant::Instant::now (20 samples, 0.02%)</title><rect x="80.8796%" y="181" width="0.0170%" height="15" fill="rgb(242,107,0)" fg:x="95366" fg:w="20"/><text x="81.1296%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="80.8992%" y="181" width="0.0110%" height="15" fill="rgb(251,28,31)" fg:x="95389" fg:w="13"/><text x="81.1492%" y="191.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (38 samples, 0.03%)</title><rect x="80.8966%" y="197" width="0.0322%" height="15" fill="rgb(233,223,10)" fg:x="95386" fg:w="38"/><text x="81.1466%" y="207.50"></text></g><g><title>numbers`quanta::instant::Instant::now (15 samples, 0.01%)</title><rect x="80.9161%" y="181" width="0.0127%" height="15" fill="rgb(215,21,27)" fg:x="95409" fg:w="15"/><text x="81.1661%" y="191.50"></text></g><g><title>numbers`data_block::compute::comparison::primitive::intrinsic::stable::_&lt;impl data_block::compute::comparison::primitive::intrinsic::PartialOrdExt for i8&gt;::ne_scalar (264 samples, 0.22%)</title><rect x="80.9382%" y="197" width="0.2239%" height="15" fill="rgb(232,23,21)" fg:x="95435" fg:w="264"/><text x="81.1882%" y="207.50"></text></g><g><title>numbers`data_block::compute::logical::and_inplace (56 samples, 0.05%)</title><rect x="81.1621%" y="197" width="0.0475%" height="15" fill="rgb(244,5,23)" fg:x="95699" fg:w="56"/><text x="81.4121%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (1,499 samples, 1.27%)</title><rect x="79.9484%" y="213" width="1.2713%" height="15" fill="rgb(226,81,46)" fg:x="94268" fg:w="1499"/><text x="80.1984%" y="223.50"></text></g><g><title>numbers`quanta::instant::Instant::now (12 samples, 0.01%)</title><rect x="81.2096%" y="197" width="0.0102%" height="15" fill="rgb(247,70,30)" fg:x="95755" fg:w="12"/><text x="81.4596%" y="207.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (8,752 samples, 7.42%)</title><rect x="81.2265%" y="213" width="7.4225%" height="15" fill="rgb(212,68,19)" fg:x="95775" fg:w="8752"/><text x="81.4765%" y="223.50">numbers`da..</text></g><g><title>numbers`data_block::array::ArrayImpl::len (13 samples, 0.01%)</title><rect x="88.6491%" y="213" width="0.0110%" height="15" fill="rgb(240,187,13)" fg:x="104527" fg:w="13"/><text x="88.8991%" y="223.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (10,322 samples, 8.75%)</title><rect x="79.9221%" y="229" width="8.7541%" height="15" fill="rgb(223,113,26)" fg:x="94237" fg:w="10322"/><text x="80.1721%" y="239.50">numbers`&lt;cur..</text></g><g><title>numbers`quanta::instant::Instant::now (14 samples, 0.01%)</title><rect x="88.6643%" y="213" width="0.0119%" height="15" fill="rgb(206,192,2)" fg:x="104545" fg:w="14"/><text x="88.9143%" y="223.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (1,352 samples, 1.15%)</title><rect x="88.6813%" y="213" width="1.1466%" height="15" fill="rgb(241,108,4)" fg:x="104565" fg:w="1352"/><text x="88.9313%" y="223.50"></text></g><g><title>numbers`quanta::instant::Instant::now (20 samples, 0.02%)</title><rect x="89.8110%" y="197" width="0.0170%" height="15" fill="rgb(247,173,49)" fg:x="105897" fg:w="20"/><text x="90.0610%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (1,362 samples, 1.16%)</title><rect x="88.6771%" y="229" width="1.1551%" height="15" fill="rgb(224,114,35)" fg:x="104560" fg:w="1362"/><text x="88.9271%" y="239.50"></text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (105,937 samples, 89.84%)</title><rect x="0.0017%" y="325" width="89.8449%" height="15" fill="rgb(245,159,27)" fg:x="2" fg:w="105937"/><text x="0.2517%" y="335.50">numbers`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>numbers`rayon_core::join::join_context::_{{closure}} (58,824 samples, 49.89%)</title><rect x="39.9581%" y="309" width="49.8885%" height="15" fill="rgb(245,172,44)" fg:x="47115" fg:w="58824"/><text x="40.2081%" y="319.50">numbers`rayon_core::join::join_context::_{{closure}}</text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (58,824 samples, 49.89%)</title><rect x="39.9581%" y="293" width="49.8885%" height="15" fill="rgb(236,23,11)" fg:x="47115" fg:w="58824"/><text x="40.2081%" y="303.50">numbers`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>numbers`rayon_core::join::join_context::_{{closure}} (11,796 samples, 10.00%)</title><rect x="79.8424%" y="277" width="10.0042%" height="15" fill="rgb(205,117,38)" fg:x="94143" fg:w="11796"/><text x="80.0924%" y="287.50">numbers`rayon_..</text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (11,796 samples, 10.00%)</title><rect x="79.8424%" y="261" width="10.0042%" height="15" fill="rgb(237,72,25)" fg:x="94143" fg:w="11796"/><text x="80.0924%" y="271.50">numbers`rayon:..</text></g><g><title>numbers`curvature::exec::query_executor::execute_pipeline (11,787 samples, 10.00%)</title><rect x="79.8501%" y="245" width="9.9965%" height="15" fill="rgb(244,70,9)" fg:x="94152" fg:w="11787"/><text x="80.1001%" y="255.50">numbers`curvat..</text></g><g><title>numbers`&lt;curvature::exec::physical_operator::aggregate::simple_aggregate::SimpleAggregate as curvature::exec::physical_operator::PhysicalOperator&gt;::write_data (97 samples, 0.08%)</title><rect x="89.8932%" y="213" width="0.0823%" height="15" fill="rgb(217,125,39)" fg:x="105994" fg:w="97"/><text x="90.1432%" y="223.50"></text></g><g><title>numbers`quanta::instant::Instant::now (61 samples, 0.05%)</title><rect x="89.9238%" y="197" width="0.0517%" height="15" fill="rgb(235,36,10)" fg:x="106030" fg:w="61"/><text x="90.1738%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.01%)</title><rect x="90.0306%" y="165" width="0.0136%" height="15" fill="rgb(251,123,47)" fg:x="106156" fg:w="16"/><text x="90.2806%" y="175.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (60 samples, 0.05%)</title><rect x="90.0442%" y="165" width="0.0509%" height="15" fill="rgb(221,13,13)" fg:x="106172" fg:w="60"/><text x="90.2942%" y="175.50"></text></g><g><title>numbers`quanta::instant::Instant::now (39 samples, 0.03%)</title><rect x="90.0620%" y="149" width="0.0331%" height="15" fill="rgb(238,131,9)" fg:x="106193" fg:w="39"/><text x="90.3120%" y="159.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::field_ref::FieldRef as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (28 samples, 0.02%)</title><rect x="90.0951%" y="165" width="0.0237%" height="15" fill="rgb(211,50,8)" fg:x="106232" fg:w="28"/><text x="90.3451%" y="175.50"></text></g><g><title>numbers`core::ops::function::FnOnce::call_once (982 samples, 0.83%)</title><rect x="90.1188%" y="165" width="0.8328%" height="15" fill="rgb(245,182,24)" fg:x="106260" fg:w="982"/><text x="90.3688%" y="175.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::arith::Arith as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (1,135 samples, 0.96%)</title><rect x="90.0128%" y="181" width="0.9626%" height="15" fill="rgb(242,14,37)" fg:x="106135" fg:w="1135"/><text x="90.2628%" y="191.50"></text></g><g><title>numbers`quanta::instant::Instant::now (23 samples, 0.02%)</title><rect x="90.9559%" y="165" width="0.0195%" height="15" fill="rgb(246,228,12)" fg:x="107247" fg:w="23"/><text x="91.2059%" y="175.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::constant::Constant as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (38 samples, 0.03%)</title><rect x="90.9754%" y="181" width="0.0322%" height="15" fill="rgb(213,55,15)" fg:x="107270" fg:w="38"/><text x="91.2254%" y="191.50"></text></g><g><title>numbers`quanta::instant::Instant::now (18 samples, 0.02%)</title><rect x="90.9924%" y="165" width="0.0153%" height="15" fill="rgb(209,9,3)" fg:x="107290" fg:w="18"/><text x="91.2424%" y="175.50"></text></g><g><title>numbers`data_block::compute::comparison::primitive::intrinsic::stable::_&lt;impl data_block::compute::comparison::primitive::intrinsic::PartialOrdExt for i8&gt;::ne_scalar (271 samples, 0.23%)</title><rect x="91.0212%" y="181" width="0.2298%" height="15" fill="rgb(230,59,30)" fg:x="107324" fg:w="271"/><text x="91.2712%" y="191.50"></text></g><g><title>numbers`data_block::compute::logical::and_inplace (61 samples, 0.05%)</title><rect x="91.2510%" y="181" width="0.0517%" height="15" fill="rgb(209,121,21)" fg:x="107595" fg:w="61"/><text x="91.5010%" y="191.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_expr::comparison::Comparison as curvature::exec::physical_expr::PhysicalExpr&gt;::execute (1,564 samples, 1.33%)</title><rect x="89.9958%" y="197" width="1.3264%" height="15" fill="rgb(220,109,13)" fg:x="106115" fg:w="1564"/><text x="90.2458%" y="207.50"></text></g><g><title>numbers`quanta::instant::Instant::now (23 samples, 0.02%)</title><rect x="91.3028%" y="181" width="0.0195%" height="15" fill="rgb(232,18,1)" fg:x="107656" fg:w="23"/><text x="91.5528%" y="191.50"></text></g><g><title>numbers`data_block::array::ArrayImpl::filter (8,689 samples, 7.37%)</title><rect x="91.3307%" y="197" width="7.3691%" height="15" fill="rgb(215,41,42)" fg:x="107689" fg:w="8689"/><text x="91.5807%" y="207.50">numbers`da..</text></g><g><title>numbers`data_block::array::ArrayImpl::len (12 samples, 0.01%)</title><rect x="98.6999%" y="197" width="0.0102%" height="15" fill="rgb(224,123,36)" fg:x="116378" fg:w="12"/><text x="98.9499%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::filter::Filter as curvature::exec::physical_operator::PhysicalOperator&gt;::execute (10,314 samples, 8.75%)</title><rect x="89.9763%" y="213" width="8.7473%" height="15" fill="rgb(240,125,3)" fg:x="106092" fg:w="10314"/><text x="90.2263%" y="223.50">numbers`&lt;cur..</text></g><g><title>numbers`quanta::instant::Instant::now (12 samples, 0.01%)</title><rect x="98.7134%" y="197" width="0.0102%" height="15" fill="rgb(205,98,50)" fg:x="116394" fg:w="12"/><text x="98.9634%" y="207.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::ext_traits::SourceOperatorExt&gt;::read_local_data (1,281 samples, 1.09%)</title><rect x="98.7279%" y="197" width="1.0864%" height="15" fill="rgb(205,185,37)" fg:x="116411" fg:w="1281"/><text x="98.9779%" y="207.50"></text></g><g><title>numbers`quanta::instant::Instant::now (21 samples, 0.02%)</title><rect x="99.7965%" y="181" width="0.0178%" height="15" fill="rgb(238,207,15)" fg:x="117671" fg:w="21"/><text x="100.0465%" y="191.50"></text></g><g><title>numbers`&lt;curvature::exec::physical_operator::table_scan::numbers::Numbers as curvature::exec::physical_operator::PhysicalOperator&gt;::read_data (1,288 samples, 1.09%)</title><rect x="98.7236%" y="213" width="1.0923%" height="15" fill="rgb(213,199,42)" fg:x="116406" fg:w="1288"/><text x="98.9736%" y="223.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (180 samples, 0.15%)</title><rect x="99.8440%" y="69" width="0.1527%" height="15" fill="rgb(235,201,11)" fg:x="117727" fg:w="180"/><text x="100.0940%" y="79.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (180 samples, 0.15%)</title><rect x="99.8440%" y="53" width="0.1527%" height="15" fill="rgb(207,46,11)" fg:x="117727" fg:w="180"/><text x="100.0940%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (169 samples, 0.14%)</title><rect x="99.8533%" y="37" width="0.1433%" height="15" fill="rgb(241,35,35)" fg:x="117738" fg:w="169"/><text x="100.1033%" y="47.50"></text></g><g><title>numbers`std::sys_common::backtrace::__rust_begin_short_backtrace (117,906 samples, 100.00%)</title><rect x="0.0017%" y="373" width="99.9958%" height="15" fill="rgb(243,32,47)" fg:x="2" fg:w="117906"/><text x="0.2517%" y="383.50">numbers`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>numbers`rayon_core::registry::WorkerThread::wait_until_cold (117,906 samples, 100.00%)</title><rect x="0.0017%" y="357" width="99.9958%" height="15" fill="rgb(247,202,23)" fg:x="2" fg:w="117906"/><text x="0.2517%" y="367.50">numbers`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>numbers`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (117,906 samples, 100.00%)</title><rect x="0.0017%" y="341" width="99.9958%" height="15" fill="rgb(219,102,11)" fg:x="2" fg:w="117906"/><text x="0.2517%" y="351.50">numbers`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>numbers`rayon_core::join::join_context::_{{closure}} (11,969 samples, 10.15%)</title><rect x="89.8466%" y="325" width="10.1509%" height="15" fill="rgb(243,110,44)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="335.50">numbers`rayon_c..</text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (11,969 samples, 10.15%)</title><rect x="89.8466%" y="309" width="10.1509%" height="15" fill="rgb(222,74,54)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="319.50">numbers`rayon::..</text></g><g><title>numbers`rayon_core::join::join_context::_{{closure}} (11,969 samples, 10.15%)</title><rect x="89.8466%" y="293" width="10.1509%" height="15" fill="rgb(216,99,12)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="303.50">numbers`rayon_c..</text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (11,969 samples, 10.15%)</title><rect x="89.8466%" y="277" width="10.1509%" height="15" fill="rgb(226,22,26)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="287.50">numbers`rayon::..</text></g><g><title>numbers`rayon_core::join::join_context::_{{closure}} (11,969 samples, 10.15%)</title><rect x="89.8466%" y="261" width="10.1509%" height="15" fill="rgb(217,163,10)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="271.50">numbers`rayon_c..</text></g><g><title>numbers`rayon::iter::plumbing::bridge_producer_consumer::helper (11,969 samples, 10.15%)</title><rect x="89.8466%" y="245" width="10.1509%" height="15" fill="rgb(213,25,53)" fg:x="105939" fg:w="11969"/><text x="90.0966%" y="255.50">numbers`rayon::..</text></g><g><title>numbers`curvature::exec::query_executor::execute_pipeline (11,957 samples, 10.14%)</title><rect x="89.8568%" y="229" width="10.1407%" height="15" fill="rgb(252,105,26)" fg:x="105951" fg:w="11957"/><text x="90.1068%" y="239.50">numbers`curvatu..</text></g><g><title>numbers`quanta::instant::Instant::now (201 samples, 0.17%)</title><rect x="99.8270%" y="213" width="0.1705%" height="15" fill="rgb(220,39,43)" fg:x="117707" fg:w="201"/><text x="100.0770%" y="223.50"></text></g><g><title>numbers`once_cell::imp::OnceCell&lt;T&gt;::initialize (199 samples, 0.17%)</title><rect x="99.8287%" y="197" width="0.1688%" height="15" fill="rgb(229,68,48)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="207.50"></text></g><g><title>numbers`once_cell::imp::initialize_or_wait (199 samples, 0.17%)</title><rect x="99.8287%" y="181" width="0.1688%" height="15" fill="rgb(252,8,32)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="191.50"></text></g><g><title>numbers`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (199 samples, 0.17%)</title><rect x="99.8287%" y="165" width="0.1688%" height="15" fill="rgb(223,20,43)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="175.50"></text></g><g><title>numbers`once_cell::imp::OnceCell&lt;T&gt;::initialize (199 samples, 0.17%)</title><rect x="99.8287%" y="149" width="0.1688%" height="15" fill="rgb(229,81,49)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="159.50"></text></g><g><title>numbers`once_cell::imp::initialize_or_wait (199 samples, 0.17%)</title><rect x="99.8287%" y="133" width="0.1688%" height="15" fill="rgb(236,28,36)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="143.50"></text></g><g><title>numbers`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (199 samples, 0.17%)</title><rect x="99.8287%" y="117" width="0.1688%" height="15" fill="rgb(249,185,26)" fg:x="117709" fg:w="199"/><text x="100.0787%" y="127.50"></text></g><g><title>numbers`quanta::Calibration::calibrate (195 samples, 0.17%)</title><rect x="99.8321%" y="101" width="0.1654%" height="15" fill="rgb(249,174,33)" fg:x="117713" fg:w="195"/><text x="100.0821%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (185 samples, 0.16%)</title><rect x="99.8406%" y="85" width="0.1569%" height="15" fill="rgb(233,201,37)" fg:x="117723" fg:w="185"/><text x="100.0906%" y="95.50"></text></g><g><title>all (117,911 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="117911"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (117,909 samples, 100.00%)</title><rect x="0.0017%" y="437" width="99.9983%" height="15" fill="rgb(250,127,30)" fg:x="2" fg:w="117909"/><text x="0.2517%" y="447.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (117,909 samples, 100.00%)</title><rect x="0.0017%" y="421" width="99.9983%" height="15" fill="rgb(230,49,44)" fg:x="2" fg:w="117909"/><text x="0.2517%" y="431.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>numbers`std::sys::pal::unix::thread::Thread::new::thread_start (117,909 samples, 100.00%)</title><rect x="0.0017%" y="405" width="99.9983%" height="15" fill="rgb(229,67,23)" fg:x="2" fg:w="117909"/><text x="0.2517%" y="415.50">numbers`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>numbers`core::ops::function::FnOnce::call_once{{vtable.shim}} (117,909 samples, 100.00%)</title><rect x="0.0017%" y="389" width="99.9983%" height="15" fill="rgb(249,83,47)" fg:x="2" fg:w="117909"/><text x="0.2517%" y="399.50">numbers`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>